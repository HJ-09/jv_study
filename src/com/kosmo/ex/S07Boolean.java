package com.kosmo.ex;

public class S07Boolean {
    /*

## ✅ 수업 내용 요약: 자바의 논리형(boolean)과 논리 연산자

### 1. 논리형(boolean)

* 값은 `true`(참) 또는 `false`(거짓)만 가짐
* 산술 연산 불가 (`true + 1` 등 불가능)
* 내부적으로 1bit로 표현되나, JVM 메모리상 기본 1byte 크기

### 2. 비교 연산자

* `==`, `!=`, `>`, `<`, `>=`, `<=`
* `<>`는 자바에서 사용 불가

### 3. 객체 비교 시 주의사항

* 배열 등 참조형 비교는 `==`가 주소 비교(내용 비교 아님)
* 문자열은 리터럴 풀에 있으면 주소가 같을 수 있으나,
  **일반적으로 문자열 비교는 `.equals()`를 사용**해야 함

### 4. 논리 연산자

* `&&` (AND), `||` (OR), `!` (NOT)
* `true` = 1, `false` = 0 개념
* 연산 규칙:

  * `false || false` = `false`
  * `true || false` = `true`
  * `true && false` = `false`
  * `!true` = `false` 등

---

## 🧪 연습문제 (정답 제외)

**1.** 자바에서 boolean 타입이 가질 수 있는 값은 무엇인가?
>> 정답 : true(1), false(0)
---

**2.** 다음 코드가 컴파일 오류가 나는 이유를 설명하시오.

```java
System.out.println(true + 1);
```

>> 정답 : boolean 타입은 논리형이라서 연산 불가능..
>>> 자바는 논리형 <<산술 연산>>이 불가능!

**3.** 다음 배열 두 개에 대해 `==` 연산을 했을 때 결과가 왜 `false`가 되는지 설명하시오.

```java
int[] a = {1, 2, 3};
int[] b = {1, 2, 3};
System.out.println(a == b);
```

>> 정답 : 문자열은 같은지 확인할 수 없음.
>>> 자료형을 선언하면 매번 새로운 자료가 생성되기 때문에 두 배열 자료는 다르다.
>>> 컴퓨터는 기본적으로 자료형을 비교할 때 내부 데이터(필드/ {} 안에 있는거)를 하나씩 비교해서 결과값(같은지)을 반환하지 않음.


**4.** 문자열 비교 시 `==`와 `.equals()`의 차이는 무엇인가?
>> 정답 : ==는 기본형 비교연산, .equals()는 참조형 비교연산
>>> 자료형의 내부 필드가 모두 같은지 확인하는 함수
>>> .equals()는 내부적으로 재정의해야 사용가능..~ 사용자의 도움이 필요..(?)


**5.** 다음 코드 출력 결과를 예상하시오.  (예시&추가문제 맨 밑에!)

```java
String s1 = "hello";   // ⇒ "hello"가 메모리에 있는지 확인 → 없어서 생성 (주소 예:@123)
String s2 = "hello";   // ⇒ "hello"가 메모리에 있는지 확인 → 주소 @123에 있어서 참조
System.out.println(s1 == s2);  //통신같은 상황에서는 false가 뜰 수도 잇음!
System.out.println(s1.equals(s2));
```

>> 정답 : true / true
☆☆☆☆☆☆☆ 특이하게도 문자열 자료형 데이터만 문자열을 리터럴하게("") 선언할 때 메모리에 동일한 데이터가 있는지 확인하고, 데이터가 있으면 참조함. ☆☆☆☆☆☆☆
>>> 기본형은 매번 생성~~~

**6.** 다음 중 올바른 비교 연산자가 아닌 것은?
A. `!=`
B. `<>`
C. `<=`
D. `==`

>> 정답 : B

**7.** 논리 연산자 `&&`와 `||`의 차이점과 사용하는 상황을 간략히 설명하시오.

>> 정답 : &&연산은 교집합(false 찾기), ||연산은 합집합(true 찾기)
>>> 곱연산, 합연산

**8.** 다음 표현식의 결과는 무엇인가?

```java
(5 > 3) && (2 < 1)
```

>> 정답 : false

**9.** 다음 표현식의 결과는 무엇인가?

```java
!(10 == 5) || (7 > 9)
```

>> 정답 : true
>>> true ||   //→ 자바는 이순간 연산을 멈춤. 왜냐, ||연산 앞에 이미 true가 있으니께 ⇒ true 반환.
>>> false &&  //→ 이것도 마찬가지로 멈춤
>>> false && t && t && t ⇒ 자바가 첫번째 연산에서 멈춘다.
    └─ 자바가 단락평가(지연평가, 연산전에 논리연산을 파악하는 단계)를 진행

**10.** `false && true || !false` 표현식의 결과를 계산해보시오.
>> 정답 : true
---

*/

    public static void main(String[] args) {
        String a="hello"; //리터럴하게 자료형 생성
        String b="hello"; //리터럴하게 자료형 생성
        String c=new String("hello"); //→명시적 자료형 생성
        System.out.println(a);
        System.out.println(b);
        System.out.println(c);
        System.out.println(a==b); //→ 리터럴한 자료만 비교가능. 그래서 결과값 true.
        System.out.println(a==c); //→ 리터럴하지 않은 자료(c)와는 비교 불가능. 그래서 결과값 false.
        System.out.println(b==c); //→ 위와 같은 내용.

    }
}
